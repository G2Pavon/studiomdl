[1msrc/bmpread.c:69:7: [31mstyle:[39m struct member 'RGB_data::b' is never used. [unusedStructMember][0m
 BYTE b;
      ^
[1msrc/bmpread.c:70:7: [31mstyle:[39m struct member 'RGB_data::g' is never used. [unusedStructMember][0m
 BYTE g;
      ^
[1msrc/bmpread.c:71:7: [31mstyle:[39m struct member 'RGB_data::r' is never used. [unusedStructMember][0m
 BYTE r;
      ^
[1msrc/cmdlib.c:59:6: [31mstyle:[39m Condition '!qdir' is always false [knownConditionTrueFalse][0m
 if (!qdir)
     ^
[1msrc/cmdlib.c:75:7: [31mstyle:[39m The scope of the variable 'archivename' can be reduced. [variableScope][0m
 char archivename[1024];
      ^
[1msrc/cmdlib.c:301:13: [31mstyle:[39m The scope of the variable 'c' can be reduced. [variableScope][0m
 char *ofs, c;
            ^
[1msrc/mathlib.c:35:9: [31mstyle:[39m Variable 'i' is reassigned a value before the old one has been used. [redundantAssignment][0m
 for (i = 0; i < 3; i++)
        ^
[1msrc/mathlib.c:32:5: [2mnote:[0m i is assigned
  i = 1;
    ^
[1msrc/mathlib.c:35:9: [2mnote:[0m i is overwritten
 for (i = 0; i < 3; i++)
        ^
[1msrc/mathlib.c:8:26: [31mstyle:[39m Parameter 'v1' can be declared with const [constParameter][0m
int VectorCompare(vec3_t v1, vec3_t v2)
                         ^
[1msrc/mathlib.c:8:37: [31mstyle:[39m Parameter 'v2' can be declared with const [constParameter][0m
int VectorCompare(vec3_t v1, vec3_t v2)
                                    ^
[1msrc/mathlib.c:19:26: [31mstyle:[39m Parameter 'v1' can be declared with const [constParameter][0m
void CrossProduct(vec3_t v1, vec3_t v2, vec3_t cross)
                         ^
[1msrc/mathlib.c:19:37: [31mstyle:[39m Parameter 'v2' can be declared with const [constParameter][0m
void CrossProduct(vec3_t v1, vec3_t v2, vec3_t cross)
                                    ^
[1msrc/studiomdl.c:1158:15: [31mwarning:[39m Either the condition 'i>=256' is redundant or the array 'pmodel->pmesh[256]' is accessed at index 256, which is out of bounds. [arrayIndexOutOfBoundsCond][0m
 pmodel->pmesh[i] = kalloc(1, sizeof(s_mesh_t));
              ^
[1msrc/studiomdl.c:1152:8: [2mnote:[0m Assuming that condition 'i>=256' is not redundant
 if (i >= MAXSTUDIOMESHES)
       ^
[1msrc/studiomdl.c:1158:15: [2mnote:[0m Array index out of bounds
 pmodel->pmesh[i] = kalloc(1, sizeof(s_mesh_t));
              ^
[1msrc/studiomdl.c:1159:15: [31mwarning:[39m Either the condition 'i>=256' is redundant or the array 'pmodel->pmesh[256]' is accessed at index 256, which is out of bounds. [arrayIndexOutOfBoundsCond][0m
 pmodel->pmesh[i]->skinref = j;
              ^
[1msrc/studiomdl.c:1152:8: [2mnote:[0m Assuming that condition 'i>=256' is not redundant
 if (i >= MAXSTUDIOMESHES)
       ^
[1msrc/studiomdl.c:1159:15: [2mnote:[0m Array index out of bounds
 pmodel->pmesh[i]->skinref = j;
              ^
[1msrc/studiomdl.c:1161:22: [31mwarning:[39m Either the condition 'i>=256' is redundant or the array 'pmodel->pmesh[256]' is accessed at index 256, which is out of bounds. [arrayIndexOutOfBoundsCond][0m
 return pmodel->pmesh[i];
                     ^
[1msrc/studiomdl.c:1152:8: [2mnote:[0m Assuming that condition 'i>=256' is not redundant
 if (i >= MAXSTUDIOMESHES)
       ^
[1msrc/studiomdl.c:1161:22: [2mnote:[0m Array index out of bounds
 return pmodel->pmesh[i];
                     ^
[1msrc/studiomdl.c:1199:2: [31mwarning:[39m Either the condition 'i>=4096' is redundant or the array 'pmodel->normal[4096]' is accessed at index 4096, which is out of bounds. [arrayIndexOutOfBoundsCond][0m
 VectorCopy(pnormal->org, pmodel->normal[i].org);
 ^
[1msrc/studiomdl.c:1195:8: [2mnote:[0m Assuming that condition 'i>=4096' is not redundant
 if (i >= MAXSTUDIOVERTS)
       ^
[1msrc/studiomdl.c:1199:2: [2mnote:[0m Array index out of bounds
 VectorCopy(pnormal->org, pmodel->normal[i].org);
 ^
[1msrc/studiomdl.c:1200:16: [31mwarning:[39m Either the condition 'i>=4096' is redundant or the array 'pmodel->normal[4096]' is accessed at index 4096, which is out of bounds. [arrayIndexOutOfBoundsCond][0m
 pmodel->normal[i].bone = pnormal->bone;
               ^
[1msrc/studiomdl.c:1195:8: [2mnote:[0m Assuming that condition 'i>=4096' is not redundant
 if (i >= MAXSTUDIOVERTS)
       ^
[1msrc/studiomdl.c:1200:16: [2mnote:[0m Array index out of bounds
 pmodel->normal[i].bone = pnormal->bone;
               ^
[1msrc/studiomdl.c:1201:16: [31mwarning:[39m Either the condition 'i>=4096' is redundant or the array 'pmodel->normal[4096]' is accessed at index 4096, which is out of bounds. [arrayIndexOutOfBoundsCond][0m
 pmodel->normal[i].skinref = pnormal->skinref;
               ^
[1msrc/studiomdl.c:1195:8: [2mnote:[0m Assuming that condition 'i>=4096' is not redundant
 if (i >= MAXSTUDIOVERTS)
       ^
[1msrc/studiomdl.c:1201:16: [2mnote:[0m Array index out of bounds
 pmodel->normal[i].skinref = pnormal->skinref;
               ^
[1msrc/studiomdl.c:1226:2: [31mwarning:[39m Either the condition 'i>=4096' is redundant or the array 'pmodel->vert[4096]' is accessed at index 4096, which is out of bounds. [arrayIndexOutOfBoundsCond][0m
 VectorCopy(pv->org, pmodel->vert[i].org);
 ^
[1msrc/studiomdl.c:1222:8: [2mnote:[0m Assuming that condition 'i>=4096' is not redundant
 if (i >= MAXSTUDIOVERTS)
       ^
[1msrc/studiomdl.c:1226:2: [2mnote:[0m Array index out of bounds
 VectorCopy(pv->org, pmodel->vert[i].org);
 ^
[1msrc/studiomdl.c:1227:14: [31mwarning:[39m Either the condition 'i>=4096' is redundant or the array 'pmodel->vert[4096]' is accessed at index 4096, which is out of bounds. [arrayIndexOutOfBoundsCond][0m
 pmodel->vert[i].bone = pv->bone;
             ^
[1msrc/studiomdl.c:1222:8: [2mnote:[0m Assuming that condition 'i>=4096' is not redundant
 if (i >= MAXSTUDIOVERTS)
       ^
[1msrc/studiomdl.c:1227:14: [2mnote:[0m Array index out of bounds
 pmodel->vert[i].bone = pv->bone;
             ^
[1msrc/studiomdl.c:1953:12: [31mwarning:[39m sscanf() without field width limits can crash with huge input data. [invalidscanf][0m
  else if (sscanf(line, "%s %d", cmd, &index))
           ^
[1msrc/studiomdl.c:1978:7: [31mwarning:[39m sscanf() without field width limits can crash with huge input data. [invalidscanf][0m
  if (sscanf(line, "%d \"%[^\"]\" %d", &index, name, &parent) == 3)
      ^
[1msrc/studiomdl.c:2033:3: [31mwarning:[39m sscanf() without field width limits can crash with huge input data. [invalidscanf][0m
  sscanf(line, "%s %d", cmd, &option);
  ^
[1msrc/studiomdl.c:2262:12: [31mwarning:[39m sscanf() without field width limits can crash with huge input data. [invalidscanf][0m
  else if (sscanf(line, "%s %d", cmd, &index))
           ^
[1msrc/studiomdl.c:2342:3: [31mwarning:[39m sscanf() without field width limits can crash with huge input data. [invalidscanf][0m
  sscanf(line, "%s %d", cmd, &option);
  ^
[1msrc/studiomdl.c:1014:8: [31mstyle:[39m The scope of the variable 'accum' can be reduced. [variableScope][0m
   int accum = 0;
       ^
[1msrc/studiomdl.c:1542:6: [31mstyle:[39m The scope of the variable 'time1' can be reduced. [variableScope][0m
 int time1;
     ^
[1msrc/studiomdl.c:1670:9: [31mstyle:[39m The scope of the variable 'parent' can be reduced. [variableScope][0m
 int i, parent;
        ^
[1msrc/studiomdl.c:1675:9: [31mstyle:[39m The scope of the variable 'm' can be reduced. [variableScope][0m
  float m[3][4];
        ^
[1msrc/studiomdl.c:1676:10: [31mstyle:[39m The scope of the variable 'p' can be reduced. [variableScope][0m
  vec3_t p;
         ^
[1msrc/studiomdl.c:1792:13: [31mstyle:[39m The scope of the variable 'tmp' can be reduced. [variableScope][0m
     vec3_t tmp;
            ^
[1msrc/studiomdl.c:2151:6: [31mstyle:[39m The scope of the variable 'is_started' can be reduced. [variableScope][0m
 int is_started = 0;
     ^
[1msrc/studiomdl.c:1972:6: [31mstyle:[39m Local variable 'numbones' shadows outer variable [shadowVariable][0m
 int numbones = 0;
     ^
[1msrc/studiomdl.h:78:12: [2mnote:[0m Shadowed declaration
EXTERN int numbones;
           ^
[1msrc/studiomdl.c:1972:6: [2mnote:[0m Shadow variable
 int numbones = 0;
     ^
[1msrc/studiomdl.c:422:6: [31merror:[39m Uninitialized variable: defaultpos [uninitvar][0m
     defaultpos[k] = kalloc(MAXSTUDIOANIMATIONS, sizeof(vec3_t));
     ^
[1msrc/studiomdl.c:423:6: [31merror:[39m Uninitialized variable: defaultrot [uninitvar][0m
     defaultrot[k] = kalloc(MAXSTUDIOANIMATIONS, sizeof(vec3_t));
     ^
[1msrc/studiomdl.c:707:5: [31merror:[39m Uninitialized variable: origpos [uninitvar][0m
    origpos[j] = sequence[i].panim[q]->pos[j];
    ^
[1msrc/studiomdl.c:708:5: [31merror:[39m Uninitialized variable: origrot [uninitvar][0m
    origrot[j] = sequence[i].panim[q]->rot[j];
    ^
[1msrc/studiomdl.c:1331:8: [31merror:[39m Uninitialized variable: k_max_u [uninitvar][0m
   if (k_max_u + 1.0 < max_u)
       ^
[1msrc/studiomdl.c:1312:18: [2mnote:[0m Assuming condition is false
   for (i = 0; i < pmesh->numtris; i++)
                 ^
[1msrc/studiomdl.c:1331:8: [2mnote:[0m Uninitialized variable: k_max_u
   if (k_max_u + 1.0 < max_u)
       ^
[1msrc/studiomdl.c:1374:8: [31merror:[39m Uninitialized variable: k_max_v [uninitvar][0m
   if (k_max_v + 1.0 < max_v)
       ^
[1msrc/studiomdl.c:1355:18: [2mnote:[0m Assuming condition is false
   for (i = 0; i < pmesh->numtris; i++)
                 ^
[1msrc/studiomdl.c:1374:8: [2mnote:[0m Uninitialized variable: k_max_v
   if (k_max_v + 1.0 < max_v)
       ^
[1msrc/studiomdl.c:1557:7: [31merror:[39m Uninitialized variable: time1 [uninitvar][0m
  if (time1 == -1)
      ^
[1msrc/studiomdl.c:1550:17: [2mnote:[0m Assuming condition is false
  for (i = 0; i < cdtextureset; i++)
                ^
[1msrc/studiomdl.c:1557:7: [2mnote:[0m Uninitialized variable: time1
  if (time1 == -1)
      ^
[1msrc/studiomdl.c:1241:12: [31mstyle:[39m Variable 'tmp' is assigned a value that is never used. [unreadVariable][0m
 float tmp = org[0];
           ^
[1msrc/studiomdl.c:1638:8: [31mstyle:[39m Variable 'index' is assigned a value that is never used. [unreadVariable][0m
 index = 0;
       ^
[1msrc/studiomdl.c:2151:17: [31mstyle:[39m Variable 'is_started' is assigned a value that is never used. [unreadVariable][0m
 int is_started = 0;
                ^
[1msrc/studiomdl.c:2172:15: [31mstyle:[39m Variable 'is_started' is assigned a value that is never used. [unreadVariable][0m
   is_started = 1;
              ^
[1msrc/studiomdl.c:2187:17: [31mstyle:[39m Variable 'is_started' is assigned a value that is never used. [unreadVariable][0m
 int is_started = 0;
                ^
[1msrc/studiomdl.c:1796:10: [31mwarning:[39m %f in format string (no. 2) requires 'float *' but the argument type is 'double *'. [invalidScanfArgType_float][0m
     if (sscanf(line, "%d %f %f %f %f %f %f %f %f",
         ^
[1msrc/studiomdl.c:1796:10: [31mwarning:[39m %f in format string (no. 3) requires 'float *' but the argument type is 'double *'. [invalidScanfArgType_float][0m
     if (sscanf(line, "%d %f %f %f %f %f %f %f %f",
         ^
[1msrc/studiomdl.c:1796:10: [31mwarning:[39m %f in format string (no. 4) requires 'float *' but the argument type is 'double *'. [invalidScanfArgType_float][0m
     if (sscanf(line, "%d %f %f %f %f %f %f %f %f",
         ^
[1msrc/studiomdl.c:1796:10: [31mwarning:[39m %f in format string (no. 5) requires 'float *' but the argument type is 'double *'. [invalidScanfArgType_float][0m
     if (sscanf(line, "%d %f %f %f %f %f %f %f %f",
         ^
[1msrc/studiomdl.c:1796:10: [31mwarning:[39m %f in format string (no. 6) requires 'float *' but the argument type is 'double *'. [invalidScanfArgType_float][0m
     if (sscanf(line, "%d %f %f %f %f %f %f %f %f",
         ^
[1msrc/studiomdl.c:1796:10: [31mwarning:[39m %f in format string (no. 7) requires 'float *' but the argument type is 'double *'. [invalidScanfArgType_float][0m
     if (sscanf(line, "%d %f %f %f %f %f %f %f %f",
         ^
[1msrc/studiomdl.c:2230:7: [31mwarning:[39m %f in format string (no. 2) requires 'float *' but the argument type is 'double *'. [invalidScanfArgType_float][0m
  if (sscanf(line, "%d %f %f %f %f %f %f", &index, &pos[0], &pos[1], &pos[2], &rot[0], &rot[1], &rot[2]) == 7)
      ^
[1msrc/studiomdl.c:2230:7: [31mwarning:[39m %f in format string (no. 3) requires 'float *' but the argument type is 'double *'. [invalidScanfArgType_float][0m
  if (sscanf(line, "%d %f %f %f %f %f %f", &index, &pos[0], &pos[1], &pos[2], &rot[0], &rot[1], &rot[2]) == 7)
      ^
[1msrc/studiomdl.c:2230:7: [31mwarning:[39m %f in format string (no. 4) requires 'float *' but the argument type is 'double *'. [invalidScanfArgType_float][0m
  if (sscanf(line, "%d %f %f %f %f %f %f", &index, &pos[0], &pos[1], &pos[2], &rot[0], &rot[1], &rot[2]) == 7)
      ^
[1msrc/studiomdl.c:2230:7: [31mwarning:[39m %f in format string (no. 5) requires 'float *' but the argument type is 'double *'. [invalidScanfArgType_float][0m
  if (sscanf(line, "%d %f %f %f %f %f %f", &index, &pos[0], &pos[1], &pos[2], &rot[0], &rot[1], &rot[2]) == 7)
      ^
[1msrc/studiomdl.c:2230:7: [31mwarning:[39m %f in format string (no. 6) requires 'float *' but the argument type is 'double *'. [invalidScanfArgType_float][0m
  if (sscanf(line, "%d %f %f %f %f %f %f", &index, &pos[0], &pos[1], &pos[2], &rot[0], &rot[1], &rot[2]) == 7)
      ^
[1msrc/studiomdl.c:2230:7: [31mwarning:[39m %f in format string (no. 7) requires 'float *' but the argument type is 'double *'. [invalidScanfArgType_float][0m
  if (sscanf(line, "%d %f %f %f %f %f %f", &index, &pos[0], &pos[1], &pos[2], &rot[0], &rot[1], &rot[2]) == 7)
      ^
[1msrc/trilib.c:16:8: [31mstyle:[39m struct member 'vector::v' is never used. [unusedStructMember][0m
 float v[3];
       ^
[1msrc/trilib.c:24:8: [31mstyle:[39m struct member 'aliaspoint_t::u' is never used. [unusedStructMember][0m
 float u;  /* u */
       ^
[1msrc/trilib.c:25:8: [31mstyle:[39m struct member 'aliaspoint_t::v' is never used. [unusedStructMember][0m
 float v;  /* v */
       ^
[1msrc/write.c:451:3: [31mwarning:[39m %d in format string (no. 1) requires 'int' but the argument type is 'const char *'. [invalidPrintfArgType_sint][0m
  printf("vertices  %6d bytes (%d vertices, %d normals)\n", pData - cur, model[i]->numverts, model[i]->numnorms);
  ^
[1msrc/write.c:488:3: [31mwarning:[39m %d in format string (no. 1) requires 'int' but the argument type is 'const char *'. [invalidPrintfArgType_sint][0m
  printf("mesh      %6d bytes (%d tris, %d strips)\n", pData - cur, total_tris, total_strips);
  ^
[1msrc/write.c:589:2: [31mportability:[39m %d in format string (no. 1) requires 'int' but the argument type is 'ptrdiff_t {aka signed int}'. [invalidPrintfArgType_sint][0m
 printf("bones     %6d bytes (%d)\n", pData - pStart - total, numbones);
 ^
[1msrc/write.c:595:2: [31mportability:[39m %d in format string (no. 1) requires 'int' but the argument type is 'ptrdiff_t {aka signed int}'. [invalidPrintfArgType_sint][0m
 printf("sequences %6d bytes (%d frames) [%d:%02d]\n", pData - pStart - total, totalframes, (int)totalseconds / 60, (int)totalseconds % 60);
 ^
[1msrc/write.c:599:2: [31mportability:[39m %d in format string (no. 1) requires 'int' but the argument type is 'ptrdiff_t {aka signed int}'. [invalidPrintfArgType_sint][0m
 printf("models    %6d bytes\n", pData - pStart - total);
 ^
[1msrc/write.c:605:3: [31mportability:[39m %d in format string (no. 1) requires 'int' but the argument type is 'ptrdiff_t {aka signed int}'. [invalidPrintfArgType_sint][0m
  printf("textures  %6d bytes\n", pData - pStart - total);
  ^
[1msrc/write.c:146:18: [31mstyle:[39m The scope of the variable 'pevent' can be reduced. [variableScope][0m
 mstudioevent_t *pevent;
                 ^
[1msrc/write.c:147:18: [31mstyle:[39m The scope of the variable 'ppivot' can be reduced. [variableScope][0m
 mstudiopivot_t *ppivot;
                 ^
[1msrc/write.c:358:10: [31mstyle:[39m The scope of the variable 'pvert' can be reduced. [variableScope][0m
 vec3_t *pvert;
         ^
[1msrc/write.c:359:10: [31mstyle:[39m The scope of the variable 'pnorm' can be reduced. [variableScope][0m
 vec3_t *pnorm;
         ^
[1msrc/write.c:360:17: [31mstyle:[39m The scope of the variable 'pmesh' can be reduced. [variableScope][0m
 mstudiomesh_t *pmesh;
                ^
[1msrc/write.c:363:6: [31mstyle:[39m The scope of the variable 'total_tris' can be reduced. [variableScope][0m
 int total_tris = 0;
     ^
[1msrc/write.c:364:6: [31mstyle:[39m The scope of the variable 'total_strips' can be reduced. [variableScope][0m
 int total_strips = 0;
     ^
[1msrc/write.c:249:42: [31mstyle:[39m Parameter 'pStart' can be declared with const [constParameter][0m
byte *WriteAnimations(byte *pData, byte *pStart, int group)
                                         ^
[1msrc/write.c:152:15: [31mstyle:[39m Variable 'pbaseseqdesc' is assigned a value that is never used. [unreadVariable][0m
 pbaseseqdesc = pseqdesc;
              ^
[1msrc/write.c:363:17: [31mstyle:[39m Variable 'total_tris' is assigned a value that is never used. [unreadVariable][0m
 int total_tris = 0;
                ^
[1msrc/write.c:364:19: [31mstyle:[39m Variable 'total_strips' is assigned a value that is never used. [unreadVariable][0m
 int total_strips = 0;
                  ^
[1mnofile:0:0: [31minformation:[39m Cppcheck cannot find all the include files (use --check-config for details) [missingIncludeSystem][0m

